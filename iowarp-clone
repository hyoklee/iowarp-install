#!/usr/bin/env python3

import os
import sys
import git
import glob
import shutil
from pathlib import Path
from jarvis_util.shell.exec import Exec
from jarvis_util.shell.local_exec import LocalExecInfo
from jarvis_util.util.argparse import ArgParse

class GitUrl:
    """Class to handle GitHub URLs for both HTTPS and SSH access"""
    def __init__(self, username: str, package_name: str):
        self.url_https = f"https://github.com/{username}/{package_name}.git"
        self.url_ssh = f"git@github.com:{username}/{package_name}.git"

class IowarpCloneArgParser(ArgParse):
    """Argument parser for IOWarp clone utility"""
    def __init__(self):
        super().__init__()
        self.iowarp = None

    def define_options(self):
        # Clone command
        self.add_menu('clone', msg='Clone all IOWarp repositories. Attempts to clone using SSH for non-iowarp users, '
                                 'falls back to HTTPS for iowarp repositories unless core_dev is set.')
        self.add_args([
            {
                'name': 'username',
                'msg': 'GitHub username to clone from',
                'type': str,
                'default': 'iowarp',
                'pos': True,
                'required': False
            },
            {
                'name': 'core_dev',
                'msg': 'Whether to use SSH for iowarp repos',
                'type': bool,
                'default': False,
                'required': False
            }
        ])

        # Pull command
        self.add_menu('pull', msg='Pull updates for all cloned repositories. Can specify remote and branch to pull from.')
        self.add_args([
            {
                'name': 'remote',
                'msg': 'Remote to pull from',
                'type': str,
                'default': '',
                'pos': True,
                'required': False
            },
            {
                'name': 'branch',
                'msg': 'Branch to pull from',
                'type': str,
                'default': '',
                'pos': True,
                'required': False
            }
        ])

        # Setup command
        self.add_menu('setup', msg='Setup development environment by copying and configuring CMakePresets.yaml from .vscode '
                                 'directory and running env.sh scripts.')

        # Env command
        self.add_menu('env', msg='Source all env.sh files found in IOWarp repositories to set up the environment.')

        # Build command
        self.add_menu('build', msg='Build all repositories that contain CMakeLists.txt. Optionally use a specific CMake preset.')
        self.add_args([
            {
                'name': 'preset',
                'msg': 'CMake preset to use',
                'type': str,
                'default': None,
                'pos': True,
                'required': False
            }
        ])

        # Install command
        self.add_menu('install', msg='Install all built repositories. Optionally use a specific CMake preset for installation.')
        self.add_args([
            {
                'name': 'preset',
                'msg': 'CMake preset to use',
                'type': str,
                'default': None,
                'pos': True,
                'required': False
            }
        ])

        # Clear command
        self.add_menu('clear', msg='Remove all build directories from IOWarp repositories to clean the workspace.')

    def check_iowarp_env(self):
        """Check if IOWARP environment variable is set"""
        iowarp_dir = os.getenv('IOWARP')
        if not iowarp_dir:
            print("Error: IOWARP environment variable not set")
            sys.exit(1)
        return Path(iowarp_dir)

    def check_clone_marker(self, iowarp_dir):
        """Check if .iowarp-clone marker exists"""
        marker = iowarp_dir / '.iowarp-clone'
        if not marker.exists():
            print("Error: IOWARP/.iowarp-clone does not exist. Are you sure that clone was used properly?")
            sys.exit(1)

    def get_package_names(self):
        """Get list of package names from iowarp-spack/packages"""
        script_dir = Path(__file__).resolve().parent
        packages_dir = script_dir / 'iowarp-spack' / 'packages'
        return [d.name for d in packages_dir.iterdir() if d.is_dir()]

    def clone(self):
        """Clone command implementation"""
        iowarp_dir = self.check_iowarp_env()
        username = self.kwargs['username']
        core_dev = self.kwargs['core_dev']

        iowarp_dir.mkdir(parents=True, exist_ok=True)
        (iowarp_dir / '.iowarp-clone').touch()

        for pkg_name in self.get_package_names():
            target_dir = iowarp_dir / pkg_name
            if target_dir.exists():
                print(f"Directory {target_dir} already exists, skipping...")
                continue

            urls = GitUrl(username, pkg_name)
            success = False

            if username != 'iowarp':
                try:
                    git.Repo.clone_from(urls.url_ssh, target_dir)
                    success = True
                except git.exc.GitCommandError:
                    print(f"Failed to clone {pkg_name} using SSH URL for {username}")

            if not success:
                try:
                    url = urls.url_ssh if core_dev else urls.url_https
                    git.Repo.clone_from(url, target_dir)
                    success = True
                except git.exc.GitCommandError:
                    print(f"Warning: Failed to clone {pkg_name} from iowarp")

    def pull(self):
        """Pull command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        remote = self.kwargs['remote']
        branch = self.kwargs['branch']
        
        for repo_dir in iowarp_dir.iterdir():
            if not repo_dir.is_dir() or repo_dir.name.startswith('.'):
                continue
            
            try:
                repo = git.Repo(repo_dir)
                cmd = ['git', 'pull']
                if remote:
                    cmd.append(remote)
                if branch:
                    cmd.append(branch)
                
                Exec(' '.join(cmd), LocalExecInfo(cwd=str(repo_dir)))
                print(f"Successfully pulled {repo_dir.name}")
            except git.exc.InvalidGitRepositoryError:
                print(f"Warning: {repo_dir} is not a git repository")
            except Exception as e:
                print(f"Error pulling {repo_dir}: {str(e)}")

    def env(self):
        """Env command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        
        for repo_dir in iowarp_dir.iterdir():
            env_file = repo_dir / 'env.sh'
            if env_file.exists():
                try:
                    Exec(f"source {env_file}", LocalExecInfo(cwd=str(repo_dir)))
                    print(f"Sourced env.sh in {repo_dir.name}")
                except Exception as e:
                    print(f"Error sourcing env.sh in {repo_dir}: {str(e)}")

    def setup(self):
        """Setup command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        home_dir = str(Path.home())
        
        for repo_dir in iowarp_dir.iterdir():
            if not repo_dir.is_dir():
                continue
                
            vscode_dir = repo_dir / '.vscode'
            if vscode_dir.exists():
                presets_file = vscode_dir / 'CMakePresets.yaml'
                if presets_file.exists():
                    with open(presets_file, 'r') as f:
                        content = f.read().replace('/home/llogan', home_dir)
                    
                    with open(repo_dir / 'CMakePresets.yaml', 'w') as f:
                        f.write(content)
                    print(f"Copied and updated CMakePresets.yaml for {repo_dir.name}")
        
        self.env()

    def build(self):
        """Build command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        preset = self.kwargs['preset']
        
        for repo_dir in iowarp_dir.iterdir():
            cmake_file = repo_dir / 'CMakeLists.txt'
            if cmake_file.exists():
                build_dir = repo_dir / 'build'
                build_dir.mkdir(exist_ok=True)
                
                cmd = ['cmake', '..']
                if preset:
                    cmd.extend(['--preset', preset])
                
                try:
                    Exec(' '.join(cmd), LocalExecInfo(cwd=str(build_dir)))
                    Exec('cmake --build .', LocalExecInfo(cwd=str(build_dir)))
                    print(f"Successfully built {repo_dir.name}")
                except Exception as e:
                    print(f"Error building {repo_dir}: {str(e)}")

    def install(self):
        """Install command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        preset = self.kwargs['preset']
        
        for repo_dir in iowarp_dir.iterdir():
            build_dir = repo_dir / 'build'
            if build_dir.exists():
                cmd = ['cmake', '--install', '.']
                if preset:
                    cmd.extend(['--preset', preset])
                
                try:
                    Exec(' '.join(cmd), LocalExecInfo(cwd=str(build_dir)))
                    print(f"Successfully installed {repo_dir.name}")
                except Exception as e:
                    print(f"Error installing {repo_dir}: {str(e)}")

    def clear(self):
        """Clear command implementation"""
        iowarp_dir = self.check_iowarp_env()
        self.check_clone_marker(iowarp_dir)
        
        for repo_dir in iowarp_dir.iterdir():
            build_dir = repo_dir / 'build'
            if build_dir.exists():
                try:
                    shutil.rmtree(build_dir)
                    print(f"Cleared build directory for {repo_dir.name}")
                except Exception as e:
                    print(f"Error clearing build directory for {repo_dir}: {str(e)}")

# def main():
#     """Main entry point"""
#     args = IowarpCloneArgParser()
#     args.process_args()

# if __name__ == '__main__':
#     main() 

class MyArgParse(ArgParse):
    def define_options(self):
        self.add_menu(keep_remainder=True)
        self.add_args([
            {
                'name': 'hi',
                'msg': 'hello',
                'type': str,
                'default': None
            }
        ])

    def main_menu(self):
        print(self.kwargs['hi'])
        print(self.remainder)


args = MyArgParse()
args.process_args()
